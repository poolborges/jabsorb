<!--

  jabsorb - a Java to JavaScript Advanced Object Request Broker
  http://www.jabsorb.org

  Copyright 2007 Arthur Blake and William Becker

  based on original code from
  JSON-RPC-Java - a JSON-RPC to Java Bridge with dynamic invocation

  Copyright Metaparadigm Pte. Ltd. 2004.
  Michael Clark <michael@metaparadigm.com>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  Ant build script for Apache Ant version 1.6.5 or 1.7

-->
<project name="jabsorb" default="dist" basedir=".">
 
	<!-- necessary to be called for every other target, even clean! -->
	<target name="init">
		<tstamp />
		<property file="libraries.properties" />
		<property file="tomcat.properties" />
		<property file="build.properties" />
		<mkdir dir="${build}" />

		<path id="default-classpath" description="This is used for building the jar">
			<pathelement location="${servlet-api}" />
			<pathelement location="${slf4j-api}" />
			<pathelement location="${slf4j-jdk}" />
		</path>
		<path id="jarClasspath" description="This is used for targets that use the jar">
			<path refid="default-classpath" />
			<pathelement path="${app-jar}" />
		</path>
		<path id="tomcatClasspath" description="This is used for targets that use Jasper">
			<path refid="jarClasspath" />
			<pathelement path="${jasper-el}" />
			<pathelement path="${jsp-api}" />
			<pathelement path="${el-api}" />
			<pathelement path="${commons-daemon}" />
			<pathelement path="${tomcat-juli}" />
			<pathelement path="${jasper}" />
		</path>
	</target>

	<target name="compile" depends="init" description="Compiles the source into the build directory">
		<javac debug="true" source="1.4" srcdir="${src}" destdir="${build}">
			<classpath refid="default-classpath" />
		</javac>
	</target>

	<target name="dist" depends="compile" description="Puts the compiled source into a jar">
		<jar destfile="${app-jar}" basedir="${build}" excludes="*~" />
	</target>

	<target name="test.init" depends="init" description="Makes directories needed for the test jsps">
		<tstamp />
		<mkdir dir="${test.lib}" />
		<mkdir dir="${test.classes}" />
		<mkdir dir="${jsp.out}" />
	</target>

	<target name="compile.test" depends="test.init, dist, init" description="Compiles the testing classes">
		<javac debug="true" source="1.4" srcdir="${test.src}" destdir="${test.classes}">
			<classpath refid="jarClasspath" />
		</javac>
	</target>

	<target name="test.jsp" depends="compile.test, init" description="Creates the test jsps">
		<taskdef classname="org.apache.jasper.JspC" name="jasper2">
			<classpath refid="tomcatClasspath" />
		</taskdef>
		<jasper2 validateXml="false" uriroot="${webapp}" package="" webXmlFragment="${webinf}/web.xml.generated" outputDir="${jsp.out}" />
		<copy file="${test.src}/org/jabsorb/test/Hello.java" tofile="${webapp}/Hello.java.txt" />
		<copy file="${webapp}/hello.jsp" tofile="${webapp}/hello.jsp.txt" />
		<copy file="${webapp}/hello.js" tofile="${webapp}/hello.js.txt" />
		<copy file="${test.src}/org/jabsorb/test/Test.java" tofile="${webapp}/Test.java.txt" />
		<copy file="${webapp}/test.jsp" tofile="${webapp}/test.jsp.txt" />
		<copy file="${webapp}/test.js" tofile="${webapp}/test.js.txt" />
		<copy file="${webapp}/jsonrpc.js" tofile="${webapp}/jsonrpc.js.txt" />
		<copy file="${webinf}/web.xml" tofile="${webinf}/web.xml.out" />
		<loadfile property="generated_web.xml" srcFile="${webapp}/WEB-INF/web.xml.generated" />
		<replace file="${webapp}/WEB-INF/web.xml.out" token="&lt;!--GENERATED_JSPS--&gt;" value="${generated_web.xml}" />
	</target>

	<target name="compile.jsp" depends="test.jsp, init" description="Compiles the jsps">
		<javac debug="true" source="1.4" srcdir="${jsp.out}" destdir="${test.classes}">
			<classpath refid="tomcatClasspath" />
		</javac>
	</target>

	<target name="test.dist" depends="dist,compile.jsp, init" description="Creates a war with the test files">
		<copy file="${app-jar}" tofile="${webinf}/lib/${app-jar}" />
		<copy todir="${test.lib}">
			<fileset dir="./lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<jar destfile="${test.lib}/rsrc.jar" basedir="${test.rsrc}" excludes="*~" />
		<war destfile="${app-war}" basedir="${webapp}" excludes="**/*~,**/*.jsp,WEB-INF/web.xml*" webxml="${webapp}/WEB-INF/web.xml.out" />
	</target>

	<target name="docs" depends="init" description="Creates the documentation">
		<echo message="Making docs from ${jsp.out}" />
		<javadoc source="1.4" sourcepath="${src}" destdir="${webapp}/docs" public="true" nodeprecated="true" windowtitle="JSON-RPC-Java API">
			<classpath>
				<path refid="default-classpath" />
				<pathelement path="${app-jar}" />
			</classpath>
			<package name="org.jabsorb" />
			<package name="org.jabsorb.reflect" />
			<package name="org.jabsorb.callback" />
			<package name="org.jabsorb.localarg" />
			<package name="org.jabsorb.localarg.impl" />
			<package name="org.jabsorb.serializer" />
			<package name="org.jabsorb.serializer.impl" />
			<package name="org.jabsorb.json" />
			<!-- link href="http://java.sun.com/j2se/1.4.2/docs/api/" / -->
			<!-- link href="http://java.sun.com/products/servlet/2.2/javadoc/" / -->
			<doctitle><![CDATA[<h1>jabsorb API Documentation</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2007 Arthur Blake and William Becker.</i>]]></bottom>
		</javadoc>
	</target>


	<target name="install" depends="test.dist, init" description="Installs the war to the tomcat directory">
		<copy file="${app-war}" todir="${installpath}" />
	</target>

	<target name="uninstall" depends="init" description="Uninstalls the war from the tomcat directory">
		<delete file="${installpath}/${app-war}" />
		<delete dir="${installpath}/${app-prefix}/" />
	</target>

	<target name="clean" depends="init" description="Cleans all files produced by ant">
		<delete file="${app-war}" />
		<delete file="${app-jar}" />
		<delete file="${webapp}/WEB-INF/web.xml.out" />
		<delete file="${webapp}/WEB-INF/web.xml.generated" />
		<delete file="${webapp}/Test.java.txt" />
		<delete file="${webapp}/test.jsp.txt" />
		<delete file="${webapp}/test.js.txt" />
		<delete file="${webapp}/Hello.java.txt" />
		<delete file="${webapp}/hello.jsp.txt" />
		<delete file="${webapp}/hello.js.txt" />
		<delete file="${webapp}/jsonrpc.js.txt" />
		<delete>
			<fileset dir="." defaultexcludes="no">
				<include name="**/*~" />
			</fileset>
		</delete>
		<delete includeEmptyDirs="true" quiet="false" failonerror="false">
			<fileset dir="${build}" />
			<fileset dir="${webapp}/docs" />
			<fileset dir="${test.lib}" />
			<fileset dir="${test.classes}" />
			<fileset dir="${jsp.out}" />
		</delete>
		<echo message="Done delete!" />
	</target>

</project>
